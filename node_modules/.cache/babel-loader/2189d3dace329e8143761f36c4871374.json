{"ast":null,"code":"import jsonPlaceholder from \"../../api/jsonPlaceholder\";\nimport { FETCH_POSTS, FETCH_COMMENTS, ADD_POST, ADD_COMMENT, DELETE_POST } from \"./actionTypes\";\nexport function fetchPosts(data) {\n  return {\n    type: FETCH_POSTS,\n    data\n  };\n}\nexport function fetchComments(data) {\n  return {\n    type: FETCH_COMMENTS,\n    data\n  };\n}\nexport const addPost = data => {\n  return {\n    type: ADD_POST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT,\n    data\n  };\n};\nexport const deletePost = data => ({\n  type: DELETE_POST,\n  data\n});\nexport const getPosts = () => dispatch => {\n  jsonPlaceholder.get(\"/posts\").then(({\n    data\n  }) => {\n    dispatch(fetchPosts(data));\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getComments = () => dispatch => {\n  jsonPlaceholder.get(\"/posts/1/comments\").then(({\n    data\n  }) => dispatch(fetchComments(data))).catch(err => {\n    console.log(err);\n  });\n};\nexport const addPostCreator = (userId, id, title, body) => dispatch => {\n  const newPost = {\n    userId,\n    id,\n    title,\n    body\n  };\n  dispatch(addPost(newPost));\n};\nexport const addCommentCreator = (postId, id, name, email, body) => dispatch => {\n  const newComment = {\n    postId,\n    id,\n    name,\n    email,\n    body\n  };\n  dispatch(addComment(newComment));\n};\nexport const deletePostCreator = data => dispatch => {\n  dispatch(deletePost(data));\n};","map":{"version":3,"sources":["/home/lukaszinglot/Pulpit/pageprodwa/src/store/actions/postActions.tsx"],"names":["jsonPlaceholder","FETCH_POSTS","FETCH_COMMENTS","ADD_POST","ADD_COMMENT","DELETE_POST","fetchPosts","data","type","fetchComments","addPost","addComment","deletePost","getPosts","dispatch","get","then","catch","err","console","log","getComments","addPostCreator","userId","id","title","body","newPost","addCommentCreator","postId","name","email","newComment","deletePostCreator"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2BAA5B;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,WALF,QAOO,eAPP;AAWA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAAgD;AACrD,SAAO;AACLC,IAAAA,IAAI,EAAEP,WADD;AAELM,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,aAAT,CAAuBF,IAAvB,EAAmD;AACxD,SAAO;AACLC,IAAAA,IAAI,EAAEN,cADD;AAELK,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,MAAMG,OAAO,GAAIH,IAAD,IAA8B;AACnD,SAAO;AACLC,IAAAA,IAAI,EAAEL,QADD;AAELI,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMI,UAAU,GAAIJ,IAAD,IAA8B;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WADD;AAELG,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMK,UAAU,GAAIL,IAAD,KAA+B;AACvDC,EAAAA,IAAI,EAAEH,WADiD;AAEvDE,EAAAA;AAFuD,CAA/B,CAAnB;AAKP,OAAO,MAAMM,QAAQ,GAAG,MAAOC,QAAD,IAAqC;AACjEd,EAAAA,eAAe,CACZe,GADH,CACO,QADP,EAEGC,IAFH,CAEQ,CAAC;AAAET,IAAAA;AAAF,GAAD,KAAc;AAClBO,IAAAA,QAAQ,CAACR,UAAU,CAACC,IAAD,CAAX,CAAR;AACD,GAJH,EAKGU,KALH,CAKSC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAPH;AAQD,CATM;AAWP,OAAO,MAAMG,WAAW,GAAG,MAAOP,QAAD,IAAqC;AACpEd,EAAAA,eAAe,CACZe,GADH,CACO,mBADP,EAEGC,IAFH,CAEQ,CAAC;AAAET,IAAAA;AAAF,GAAD,KAAcO,QAAQ,CAACL,aAAa,CAACF,IAAD,CAAd,CAF9B,EAGGU,KAHH,CAGSC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GALH;AAMD,CAPM;AASP,OAAO,MAAMI,cAAc,GAAG,CAC5BC,MAD4B,EAE5BC,EAF4B,EAG5BC,KAH4B,EAI5BC,IAJ4B,KAKxBZ,QAAD,IAAqC;AACxC,QAAMa,OAAO,GAAG;AACdJ,IAAAA,MADc;AAEdC,IAAAA,EAFc;AAGdC,IAAAA,KAHc;AAIdC,IAAAA;AAJc,GAAhB;AAMAZ,EAAAA,QAAQ,CAACJ,OAAO,CAACiB,OAAD,CAAR,CAAR;AACD,CAbM;AAeP,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,MAD+B,EAE/BL,EAF+B,EAG/BM,IAH+B,EAI/BC,KAJ+B,EAK/BL,IAL+B,KAM3BZ,QAAD,IAAqC;AACxC,QAAMkB,UAAU,GAAG;AACjBH,IAAAA,MADiB;AAEjBL,IAAAA,EAFiB;AAGjBM,IAAAA,IAHiB;AAIjBC,IAAAA,KAJiB;AAKjBL,IAAAA;AALiB,GAAnB;AAOAZ,EAAAA,QAAQ,CAACH,UAAU,CAACqB,UAAD,CAAX,CAAR;AACD,CAfM;AAiBP,OAAO,MAAMC,iBAAiB,GAAI1B,IAAD,IAC/BO,QADgD,IAE7C;AACHA,EAAAA,QAAQ,CAACF,UAAU,CAACL,IAAD,CAAX,CAAR;AACD,CAJM","sourcesContent":["import jsonPlaceholder from \"../../api/jsonPlaceholder\";\nimport {\n  FETCH_POSTS,\n  FETCH_COMMENTS,\n  ADD_POST,\n  ADD_COMMENT,\n  DELETE_POST,\n  ActionTypes\n} from \"./actionTypes\";\nimport { Types, Posts } from \"./Types\";\nimport { Dispatch } from \"redux\";\n\nexport function fetchPosts(data: Types[]): ActionTypes {\n  return {\n    type: FETCH_POSTS,\n    data\n  };\n}\n\nexport function fetchComments(data: Types[]): ActionTypes {\n  return {\n    type: FETCH_COMMENTS,\n    data\n  };\n}\n\nexport const addPost = (data: Posts): ActionTypes => {\n  return {\n    type: ADD_POST,\n    data\n  };\n};\n\nexport const addComment = (data: Posts): ActionTypes => {\n  return {\n    type: ADD_COMMENT,\n    data\n  };\n};\n\nexport const deletePost = (data: Types): ActionTypes => ({\n  type: DELETE_POST,\n  data\n});\n\nexport const getPosts = () => (dispatch: Dispatch<ActionTypes>) => {\n  jsonPlaceholder\n    .get(\"/posts\")\n    .then(({ data }) => {\n      dispatch(fetchPosts(data));\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const getComments = () => (dispatch: Dispatch<ActionTypes>) => {\n  jsonPlaceholder\n    .get(\"/posts/1/comments\")\n    .then(({ data }) => dispatch(fetchComments(data)))\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const addPostCreator = (\n  userId: number,\n  id: number,\n  title: string,\n  body: string\n) => (dispatch: Dispatch<ActionTypes>) => {\n  const newPost = {\n    userId,\n    id,\n    title,\n    body\n  };\n  dispatch(addPost(newPost));\n};\n\nexport const addCommentCreator = (\n  postId: number,\n  id: number,\n  name: string,\n  email: string,\n  body: string\n) => (dispatch: Dispatch<ActionTypes>) => {\n  const newComment = {\n    postId,\n    id,\n    name,\n    email,\n    body\n  };\n  dispatch(addComment(newComment));\n};\n\nexport const deletePostCreator = (data: Types) => (\n  dispatch: Dispatch<ActionTypes>\n) => {\n  dispatch(deletePost(data));\n};\n"]},"metadata":{},"sourceType":"module"}